//Class connector, v2, generated by Prefab3D, 2016, www.closier.nl/prefab
package away3d.materials.utils.data
{
	import away3d.core.base.Object3D;
	import away3d.exporters.AWDataExporter;
	import away3d.events.ExporterEvent;
	import flash.events.AsyncErrorEvent;
	import flash.events.SecurityErrorEvent;
	import flash.events.StatusEvent;
	import flash.system.*;
	import flash.net.LocalConnection;
	import flash.utils.setTimeout;

	public class AwayConnector
	{

		public function AwayConnector()
		{
		}
		private var aData:Array= [];
		private var total:int;

		public function send(data:Object3D):void
		{
			var oe:AWDataExporter = new AWDataExporter();
			oe.addOnExportComplete(sendData);
			oe.export(data);
		}

		private function sendData(e:ExporterEvent):void
		{
			var connection:LocalConnection = new LocalConnection();
			connection.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onError);
			connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);
			connection.addEventListener(StatusEvent.STATUS, onStatus);
			total = e.data.length;
			aData = e.data.split('\n');

			if(aData.length == 1)
				aData = e.data.split(String.fromCharCode(13));

			connection.send("_away3dfeed", "onReceivedData", "~"+total);
			setTimeout(sendParts, 40, connection);
	}
		private function sendParts(connection:LocalConnection):void
		{
			if(aData.length == 0){
				setTimeout(sendTransferDone, 40, connection);
				trace("transfer completed");
			} else{
				var chunk:String = "\n";
				var loop:int = (aData.length > 450)? 450 : aData.length;
				for(var i:int = 0;i<loop;++i){
					chunk += aData[0]+"\n";
					aData.shift();
				}
				connection.send("_away3dfeed", "onReceivedData", chunk);
				setTimeout(sendParts, 40, connection);
				var percent:int = 100 - Math.floor((aData.length/total) *100);
				trace("busy transfering 3D data: "+percent+"% "+aData.length);
			}
		}

		private function sendTransferDone(connection:LocalConnection):void
		{
			connection.send("_away3dfeed", "onReceivedData", "build");
		}
		private function onError(event:AsyncErrorEvent):void
{
			trace("Connection failure!");
		}

		private function onSecurityError(event:SecurityErrorEvent):void
		{
			trace("Connection failure due to security restrictions!");
		}

		private function onStatus(event:StatusEvent):void
		{
			switch (event.level) {
                case "status":
                  trace("Connection success!");
                  break;
                case "error":
                  trace("Connection failure!");
                  break;
			}
		}

	}

}